#!/usr/bin/env sh

# NEVER install OF as root
# don't even get to the first line of actual code
# just abort ASAP
if [ "$(id -u)" -eq 0 ] || [ -n "$SUDO_USER" ]; then
    echo "Do not install OpenFortress as root"
    exit
fi

PROG=$(basename $0)

GIT_SVN="git svn"
DEFAULT_SVN=svn
# store some commands in vars for git svn
CHECKOUT="checkout"
UPDATE="update"

# helper vars
EDITOR=${EDITOR:-vi}
CONFIG_FILE=${XDG_CONFIG_HOME:-${HOME}/.config}/ofman
SPACING="   "

err()
{
    echo "${RED}${@}${CLEAR}"
}

info()
{
    echo "${BLUE}${@}${CLEAR}"
}

fin()
{
    echo "${GREEN}${@}${CLEAR}"
}

help_message()
{
    fin "OF Manager Usage"
    info "$SPACING $PROG install"
    info "$SPACING $PROG uninstall"
    info "$SPACING $PROG update"
    info "$SPACING $PROG run"
    info "$SPACING $PROG config"
}

main()
{
    detect_os

    setup_colors

    load_config
    check_svn

    if [ -z "$SKIP_DEPENDENCIES" ]; then
        resolve_dependencies $DISTRO;
    fi


    case $1 in
        install)
            checkout_repo "$OF_REPO" "$OF_DIR"
            ;;

        uninstall)
            delete_repo "$OF_REPO" "$OF_DIR"
            ;;

        update)
            update_repo "$OF_REPO" "$OF_DIR"
            ;;

        run)
            run "$OF_DIR"
            ;;

        config)
            $EDITOR "$CONFIG_FILE"
            ;;

        *)
            help_message
            ;;
    esac
}

detect_os()
{
    DISTRO=""

	OS="$OSTYPE"
	# OSTYPE is bashim, lets fall back to uname if its not available
    if [ -z "$OS" ]; then
        OS="$(uname)"
    fi

    case $OS in

        linux-gnu | Linux)

            for file in /etc/lsb-release /usr/lib/os-release \
                        /etc/os-release  /etc/openwrt_release; do
                if [ -f "$file" ]; then
                    . $file
                    break
                fi
            done

            DISTRO="$ID"
            ;;

        *BSD)
            $DISTRO="$OS"
            ;;

        *)
            echo "Unknown OS detected."
            echo "It cannot be ensured everything works correctly"
            ;;
    esac
}

setup_colors()
{
    if [ -n "$(which tty 2> /dev/null)"  ]; then
        tty -s
    else
        # can't check if we are in a tty, assume the worst
        false
    fi

    if [ "$?" -eq 0 ] && [ -z "$NO_COLOR" ] && [ "$(tput colors)" -eq 256 ]; then
        RED="$(tput setaf 9)"
        BLUE="$(tput setaf 14)"
        GREEN="$(tput setaf 10)"
        CLEAR="$(tput sgr0)"
    fi
}

load_config()
{
    if [ -f "$CONFIG_FILE" ]; then
        . $CONFIG_FILE
    else
        SVN="$DEFAULT_SVN"
        OF_REPO="https://svn.openfortress.fun/svn/open_fortress/"
        # TODO check for flatpak steam
        STEAM_DIR="${HOME}/.local/share/Steam"
        OF_DIR="${STEAM_DIR}/steamapps/sourcemods/open_fortress"

        mkdir -p "$(dirname $CONFIG_FILE)"
        echo "SVN=\"$SVN\"" > $CONFIG_FILE
        echo "OF_REPO=\"$OF_REPO\"" >> $CONFIG_FILE
        echo "OF_DIR=\"$OF_DIR\"" >> $CONFIG_FILE
    fi

    if [ -z "$SVN" ] || [ -z "$OF_REPO" ] || [ -z "OF_DIR" ]; then
        echo "Your config is invalid"
        echo "Delete \"$CONFIG_FILE\" and rerun ofman"
        exit
    fi
}

check_svn()
{
    if [ "$SVN" = "$DEFAULT_SVN" ]; then
        SVN="$DEFAULT_SVN"
        if [ -n "$(which $SVN 2> /dev/null)" ]; then
            # no need to install SVN if its present
            SKIP_DEPENDENCIES=y
        fi
    else
        # the user provided a different svn, lets skip dependencies
        SKIP_DEPENDENCIES=y

        if [ "$SVN" = "$GIT_SVN" ]; then
            CHECKOUT="clone"
            UPDATE="fetch"
        fi

    fi
}

resolve_dependencies()
{
    info "Installing dependencies"

    case $1 in
        fedora)
            sudo dnf install subversion -y || err "Couldn't install subversion using dnf."
            ;;

        ubuntu | debian | linuxmint)
            sudo apt-get update || err "Couldn't update repository cache."
            sudo apt-get install subversion -y || err "Couldn't install subversion using apt-get."
            ;;


        arch | manjaro | artix)
            sudo pacman --noconfirm -Sy subversion || err "Couldn't install subversion using pacman."
            ;;

        void)
            sudo xbps-install -Sy subversion || err "Couldn't install subversion using xbps."
            ;;

        FreeBSD)
            sudo pkg -y install subversion || err "Couldn't install subversion using pkg."
            ;;

        *)
            err "$SPACING Couldn't install dependencies."
            err "$SPACING Install the following dependencies yourself:"
            err "$SPACING  - subversion"
            ;;
    esac
}

checkout_repo()
{
    if [ -d "$2" ]; then
        err "checkout already exists"
        return
    fi

    info "Installing OpenFortress to this directory"
    echo "\"$2\""
    echo ""

    $SVN $CHECKOUT "$1" "$2"

    fin "OpenFortress installed!"
}

delete_repo()
{
    err "Are you sure you want to delete this directory? [y/n]"
    echo "\"$2\""
    echo ""

    while [ true ]
    do
        read input
        case $input in
            y*)
                info "Deleting"
                rm -rf "$2"
                return
                ;;

            n*)
                info "Exiting"
                return
                ;;

            *)
                err "Please insert y or n"
                ;;
        esac
    done
}

update_repo()
{
    if [ ! -d "$2" ]; then
        err "checkout does not exist"
        return
    fi

    info "Updating OpenFortress"

    # we cannot push throug the directory stack
    # so lets just store PWD
    OWD="$PWD"
    cd "$2"

    $SVN $UPDATE

    cd "$OWD"
    fin "Done."
}

run()
{
    pidof steam 2>1 > /dev/null

    if [ "$?" -eq 1 ]; then
        err "Steam is not running"
    else
        steam -applaunch 243750 -game $OF_DIR -secure -steam 2>&1 > /dev/null &
    fi
}

main $@
